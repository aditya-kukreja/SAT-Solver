# -*- coding: utf-8 -*-
"""DPLL_WORKING

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-FzHQ3tyWhYMdZIZabWJnTRh10_uprDx
"""

import numpy as np
from copy import deepcopy

f = open("/content/DIMACS", "r")

literalNum=0
clauseNum=0
while True:
  s=f.readline()
  s=s.split()
  if s[0][0]=='c' :
    continue
  else:   
    literalNum=int(s[2])
    clauseNum=int(s[3])
    break
clauses = []
literalCount=np.zeros(literalNum)
literalSignCount=np.zeros(literalNum)
literalAssignment=np.full(literalNum, -1)
for i in range(clauseNum):
    s=f.readline()
    s=s.split()
    a=np.full(literalNum, -1)
    for j in range(len(s)-1):  
      b=int(s[j])
      if b>0:
       literalCount[abs(b)-1]=literalCount[abs(b)-1]+1
       literalSignCount[abs(b)-1]=literalSignCount[abs(b)-1]+1
       a[abs(b)-1]=1
      elif b<0 :
       literalCount[abs(b)-1]=literalCount[abs(b)-1]+1
       literalSignCount[abs(b)-1]=literalSignCount[abs(b)-1]-1
       a[abs(b)-1]=0
      else: 
       break 
    clauses.append(a)


clauseIndex = []
def clauseSize(c):
    counter=0
    clauseIndex.clear()
    for j in range(literalNum):
        if c[j]==1 or c[j]==0:
         counter=counter+1
         clauseIndex.append(j)
    return counter     


def unitResolution(c):
    if len(c)==0:
      return 1

    i=0         
    while i<len(c):
          if clauseSize(c[i]) == 1:
              print(clauseIndex)
              y=int(literalCount[clauseIndex[0]])
              result=propagate(c,clauseIndex[0],c[i][clauseIndex[0]]%2)  
              if result==0:
                literalCount[clauseIndex[0]]=y
              if result==0 or result==1:
                return result
              i=-1
          i=i+1    
    return 2

def propagate(c,literal,assignment):
    literal=int(literal)
    literalAssignment[literal]=assignment
    literalCount[literal]=-1      
    i=0
    while i<len(c):
      if clauseSize(c[i]) ==0:
         return 0
      if c[i][literal] == assignment:
         del c[i]
         i=i-1
      elif (c[i][literal]==1 and assignment==0) or (c[i][literal]==0 and assignment==1):    
         c[i][literal]=-1
      
      i=i+1 
    if len(c) ==0:
      return 1       
    return 2        

def DPLL_solve(c):
    clausesCopy=deepcopy(c)
    p=unitResolution(clausesCopy)
    if p==1 or p==0:
      return p
    y=np.max(literalCount)
    x=int(np.argmax(literalCount))
    if literalSignCount[x]>=0:    
      status= propagate(clausesCopy,x,1)           
      if status==1:
         return 1
      if status==2:     
          return(DPLL_solve(clausesCopy))   
      if status==0:
         literalAssignment[x]=-1
         literalCount[x]=int(y)
         clausesCopy=deepcopy(c)       
         status= propagate(clausesCopy,x,0)
         if status==1:
            return 1
         if status==2:          
            return(DPLL_solve(clausesCopy))
         if status==0:
            return 0   
    else:  
      status= propagate(clausesCopy,x,0)
      if status==1:
         return 1
      if status==2:
          return(DPLL_solve(clausesCopy))   
      if status==0:
         literalAssignment[x]=-1
         literalCount[x]=int(y)
         clausesCopy=deepcopy(c)
         status= propagate(clausesCopy,x,1)
         if status==1:
            return 1
         if status==2:
            return(DPLL_solve(clausesCopy))
         if status==0:
            return 0         

def DPLL_call(c):
 r=DPLL_solve(c)
 if r==1:
   print("SAT ")
   for i in range(len(literalAssignment)):
       if (literalAssignment[i]) ==-1 or (literalAssignment[i]) ==0:
          print(-1*(i+1),end=" ")
       else:
          print(i+1,end=" ") 

 else:
   print("UNSAT")   


DPLL_call(clauses)
